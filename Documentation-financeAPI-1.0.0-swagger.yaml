openapi: 3.0.0
info:
  description: API documentation for Finance Management System
  version: "1.0.0"
  title: Finance API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FIKRANELYAFIT/financeAPI/1.0.0
tags:
  - name: Auth
    description: Authentication endpoints
  - name: Pajaks
    description: API for managing pajaks
  - name: Labas
    description: API for managing laba
  - name: Penjualans
    description: API for managing penjualans
  - name: Pengeluaran Gaji
    description: API for managing pengeluaran gaji
  - name: Pengeluaran Operasional
    description: API for managing pengeluaran operasional
  - name: Rugis
    description: API for managing rugis
  - name: Total Penjualans
    description: API for managing total penjualans
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token to access these API endpoints
  schemas:
    # Person Schemas
    Person:
      type: object
      properties:
        person_id:
          type: integer
          example: 1
        person_name:
          type: string
          example: Serhat
        person_surname:
          type: string
          example: SARI
        person_mail:
          type: string
          format: email
          example: serhat@gmail.com
        person_password:
          type: string
          format: password
          example: serhat123
    PersonInput:
      type: object
      required:
        - person_name
        - person_surname
        - person_mail
        - person_password
      properties:
        person_name:
          type: string
          example: Serhat
        person_surname:
          type: string
          example: SARI
        person_mail:
          type: string
          format: email
          example: serhat@gmail.com
        person_password:
          type: string
          format: password
          example: serhat123

    # Pajak Schemas
    Pajak:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nama_pajak:
          type: string
          example: Pajak Penghasilan
        persentase:
          type: number
          example: 10.5
        jumlah:
          type: number
          example: 500000
        total_pajak:
          type: number
          example: 52500
    PajakInput:
      type: object
      required:
        - nama_pajak
        - persentase
        - jumlah
        - total_pajak
      properties:
        nama_pajak:
          type: string
          example: Pajak Penghasilan
        persentase:
          type: number
          example: 10.5
        jumlah:
          type: number
          example: 500000
        total_pajak:
          type: number
          example: 52500

    # Laba Schemas
    Laba:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nilai:
          type: number
          example: 1000000
        createdAt:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-12-01T10:00:00Z'
    LabaInput:
      type: object
      required:
        - nilai
      properties:
        nilai:
          type: number
          example: 1000000

    # Penjualan Schemas
    Penjualan:
      type: object
      properties:
        id:
          type: integer
          example: 1
        total_penjualan:
          type: number
          example: 100000
        tanggal:
          type: string
          format: date
          example: '2023-12-01'
    PenjualanInput:
      type: object
      required:
        - total_penjualan
        - tanggal
      properties:
        total_penjualan:
          type: number
          example: 100000
        tanggal:
          type: string
          format: date
          example: '2023-12-01'

    # Pengeluaran Gaji Schemas
    PengeluaranGaji:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nama_karyawan:
          type: string
          example: Budi Santoso
        gaji:
          type: number
          example: 5000000
        bulan:
          type: string
          example: Desember
        tahun:
          type: integer
          example: 2023
    PengeluaranGajiInput:
      type: object
      required:
        - nama_karyawan
        - gaji
        - bulan
        - tahun
      properties:
        nama_karyawan:
          type: string
          example: Budi Santoso
        gaji:
          type: number
          example: 5000000
        bulan:
          type: string
          example: Desember
        tahun:
          type: integer
          example: 2023

    # Pengeluaran Operasional Schemas
    PengeluaranOperasional:
      type: object
      properties:
        id:
          type: integer
          example: 1
        jenis_pengeluaran:
          type: string
          example: Bahan Baku
        jumlah:
          type: number
          example: 2000000
        tanggal:
          type: string
          format: date
          example: '2023-12-05'
    PengeluaranOperasionalInput:
      type: object
      required:
        - jenis_pengeluaran
        - jumlah
        - tanggal
      properties:
        jenis_pengeluaran:
          type: string
          example: Bahan Baku
        jumlah:
          type: number
          example: 2000000
        tanggal:
          type: string
          format: date
          example: '2023-12-05'

    # Rugi Schemas
    Rugi:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nama:
          type: string
          example: Kerusakan Mesin
        jumlah:
          type: number
          example: 1500000
        tanggal:
          type: string
          format: date
          example: '2023-12-10'
    RugiInput:
      type: object
      required:
        - nama
        - jumlah
        - tanggal
      properties:
        nama:
          type: string
          example: Kerusakan Mesin
        jumlah:
          type: number
          example: 1500000
        tanggal:
          type: string
          format: date
          example: '2023-12-10'

    # Total Penjualan Schemas
    TotalPenjualan:
      type: object
      properties:
        id:
          type: integer
          example: 1
        product:
          type: string
          example: Laptop
        quantity:
          type: integer
          example: 10
        price:
          type: number
          example: 15000000
        total:
          type: number
          example: 150000000
    TotalPenjualanInput:
      type: object
      required:
        - product
        - quantity
        - price
        - total
      properties:
        product:
          type: string
          example: Laptop
        quantity:
          type: integer
          example: 10
        price:
          type: number
          example: 15000000
        total:
          type: number
          example: 150000000

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      operationId: registerUser
      description: Register a new user by providing name, surname, mail, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Invalid request

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login a user
      operationId: loginUser
      description: Login a user by providing mail and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - person_mail
                - person_password
              properties:
                person_mail:
                  type: string
                  format: email
                  example: serhat@gmail.com
                person_password:
                  type: string
                  format: password
                  example: serhat123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  name:
                    type: string
                    example: Serhat
                  surname:
                    type: string
                    example: SARI
                  mail:
                    type: string
                    format: email
                    example: serhat@gmail.com
        '400':
          description: Invalid request
        '404':
          description: Person not found

  /pajaks:
    get:
      tags:
        - Pajaks
      summary: Retrieve all pajaks
      operationId: getAllPajaks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of pajaks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pajak'
        '500':
          description: Server error

    post:
      tags:
        - Pajaks
      summary: Create a new pajak
      operationId: createPajak
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PajakInput'
      responses:
        '201':
          description: Pajak created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pajak'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /pajaks/{id}:
    get:
      tags:
        - Pajaks
      summary: Retrieve a pajak by ID
      operationId: getPajakById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pajak ID
          schema:
            type: integer
      responses:
        '200':
          description: A single pajak object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pajak'
        '404':
          description: Pajak not found
        '500':
          description: Server error

    put:
      tags:
        - Pajaks
      summary: Update a pajak by ID
      operationId: updatePajakById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pajak ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PajakInput'
      responses:
        '200':
          description: Pajak updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pajak updated successfully
        '404':
          description: Pajak not found
        '500':
          description: Server error

    delete:
      tags:
        - Pajaks
      summary: Delete a pajak by ID
      operationId: deletePajakById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pajak ID
          schema:
            type: integer
      responses:
        '200':
          description: Pajak deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pajak deleted successfully
        '404':
          description: Pajak not found
        '500':
          description: Server error

  /labas:
    get:
      tags:
        - Labas
      summary: Retrieve all laba
      operationId: getAllLaba
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of laba.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Laba'
        '500':
          description: Server error

    post:
      tags:
        - Labas
      summary: Create a new laba
      operationId: createLaba
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabaInput'
      responses:
        '201':
          description: Laba created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Laba'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /labas/{id}:
    get:
      tags:
        - Labas
      summary: Retrieve a laba by ID
      operationId: getLabaById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Laba ID
          schema:
            type: integer
      responses:
        '200':
          description: A single laba object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Laba'
        '404':
          description: Laba not found
        '500':
          description: Server error

  /penjualans:
    get:
      tags:
        - Penjualans
      summary: Retrieve all penjualans
      operationId: getAllPenjualans
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of penjualans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Penjualan'
        '500':
          description: Server error

    post:
      tags:
        - Penjualans
      summary: Create a new penjualan
      operationId: createPenjualan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PenjualanInput'
      responses:
        '201':
          description: Penjualan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Penjualan'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /penjualans/{id}:
    get:
      tags:
        - Penjualans
      summary: Retrieve a penjualan by ID
      operationId: getPenjualanById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Penjualan ID
          schema:
            type: integer
      responses:
        '200':
          description: A single penjualan object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Penjualan'
        '404':
          description: Penjualan not found
        '500':
          description: Server error

    put:
      tags:
        - Penjualans
      summary: Update a penjualan by ID
      operationId: updatePenjualanById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Penjualan ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PenjualanInput'
      responses:
        '200':
          description: Penjualan updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Penjualan updated successfully
        '400':
          description: Invalid input
        '404':
          description: Penjualan not found
        '500':
          description: Server error

    delete:
      tags:
        - Penjualans
      summary: Delete a penjualan by ID
      operationId: deletePenjualanById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Penjualan ID
          schema:
            type: integer
      responses:
        '200':
          description: Penjualan deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Penjualan deleted successfully
        '404':
          description: Penjualan not found
        '500':
          description: Server error

  /pengeluaran-gaji:
    get:
      tags:
        - Pengeluaran Gaji
      summary: Retrieve all pengeluaran gaji records
      operationId: getAllPengeluaranGaji
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of pengeluaran gaji records.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PengeluaranGaji'
        '500':
          description: Server error

    post:
      tags:
        - Pengeluaran Gaji
      summary: Create a new pengeluaran gaji record
      operationId: createPengeluaranGaji
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PengeluaranGajiInput'
      responses:
        '201':
          description: Pengeluaran Gaji created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PengeluaranGaji'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /pengeluaran-gaji/{id}:
    get:
      tags:
        - Pengeluaran Gaji
      summary: Retrieve a pengeluaran gaji by ID
      operationId: getPengeluaranGajiById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pengeluaran Gaji ID
          schema:
            type: integer
      responses:
        '200':
          description: A single pengeluaran gaji record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PengeluaranGaji'
        '404':
          description: Pengeluaran Gaji not found
        '500':
          description: Server error

    put:
      tags:
        - Pengeluaran Gaji
      summary: Update a pengeluaran gaji by ID
      operationId: updatePengeluaranGajiById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pengeluaran Gaji ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PengeluaranGajiInput'
      responses:
        '200':
          description: Pengeluaran Gaji updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pengeluaran Gaji updated successfully
        '404':
          description: Pengeluaran Gaji not found
        '500':
          description: Server error

    delete:
      tags:
        - Pengeluaran Gaji
      summary: Delete a pengeluaran gaji by ID
      operationId: deletePengeluaranGajiById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pengeluaran Gaji ID
          schema:
            type: integer
      responses:
        '200':
          description: Pengeluaran Gaji deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pengeluaran Gaji deleted successfully
        '404':
          description: Pengeluaran Gaji not found
        '500':
          description: Server error

  /pengeluaran-operasionals:
    get:
      tags:
        - Pengeluaran Operasional
      summary: Retrieve all pengeluaran operasionals
      operationId: getAllPengeluaranOperasionals
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of pengeluaran operasionals.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PengeluaranOperasional'
        '500':
          description: Server error

    post:
      tags:
        - Pengeluaran Operasional
      summary: Create a new pengeluaran operasional
      operationId: createPengeluaranOperasional
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PengeluaranOperasionalInput'
      responses:
        '201':
          description: Pengeluaran Operasional created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PengeluaranOperasional'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /pengeluaran-operasionals/{id}:
    get:
      tags:
        - Pengeluaran Operasional
      summary: Retrieve a pengeluaran operasional by ID
      operationId: getPengeluaranOperasionalById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pengeluaran Operasional ID
          schema:
            type: integer
      responses:
        '200':
          description: A single pengeluaran operasional record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PengeluaranOperasional'
        '404':
          description: Pengeluaran Operasional not found
        '500':
          description: Server error

    put:
      tags:
        - Pengeluaran Operasional
      summary: Update a pengeluaran operasional by ID
      operationId: updatePengeluaranOperasionalById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pengeluaran Operasional ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PengeluaranOperasionalInput'
      responses:
        '200':
          description: Pengeluaran Operasional updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pengeluaran Operasional updated successfully
        '404':
          description: Pengeluaran Operasional not found
        '500':
          description: Server error

    delete:
      tags:
        - Pengeluaran Operasional
      summary: Delete a pengeluaran operasional by ID
      operationId: deletePengeluaranOperasionalById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Pengeluaran Operasional ID
          schema:
            type: integer
      responses:
        '200':
          description: Pengeluaran Operasional deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pengeluaran Operasional deleted successfully
        '404':
          description: Pengeluaran Operasional not found
        '500':
          description: Server error

  /rugis:
    get:
      tags:
        - Rugis
      summary: Retrieve all rugis
      operationId: getAllRugis
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of rugis.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rugi'
        '500':
          description: Server error

    post:
      tags:
        - Rugis
      summary: Create a new rugi
      operationId: createRugi
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RugiInput'
      responses:
        '201':
          description: Rugi created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rugi'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /rugis/{id}:
    get:
      tags:
        - Rugis
      summary: Retrieve a rugi by ID
      operationId: getRugiById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Rugi ID
          schema:
            type: integer
      responses:
        '200':
          description: A single rugi object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rugi'
        '404':
          description: Rugi not found
        '500':
          description: Server error

    put:
      tags:
        - Rugis
      summary: Update a rugi by ID
      operationId: updateRugiById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Rugi ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RugiInput'
      responses:
        '200':
          description: Rugi updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Rugi updated successfully
        '404':
          description: Rugi not found
        '500':
          description: Server error

    delete:
      tags:
        - Rugis
      summary: Delete a rugi by ID
      operationId: deleteRugiById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Rugi ID
          schema:
            type: integer
      responses:
        '200':
          description: Rugi deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Rugi deleted successfully
        '404':
          description: Rugi not found
        '500':
          description: Server error

  /total-penjualans:
    get:
      tags:
        - Total Penjualans
      summary: Retrieve all total penjualans
      operationId: getAllTotalPenjualans
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of total penjualans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TotalPenjualan'
        '500':
          description: Server error

    post:
      tags:
        - Total Penjualans
      summary: Create a new total penjualan
      operationId: createTotalPenjualan
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TotalPenjualanInput'
      responses:
        '201':
          description: Total Penjualan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalPenjualan'
        '400':
          description: Invalid input
        '500':
          description: Server error

  /total-penjualans/{id}:
    get:
      tags:
        - Total Penjualans
      summary: Retrieve a total penjualan by ID
      operationId: getTotalPenjualanById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Total Penjualan ID
          schema:
            type: integer
      responses:
        '200':
          description: A single total penjualan object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TotalPenjualan'
        '404':
          description: Total Penjualan not found
        '500':
          description: Server error

    put:
      tags:
        - Total Penjualans
      summary: Update a total penjualan by ID
      operationId: updateTotalPenjualanById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Total Penjualan ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TotalPenjualanInput'
      responses:
        '200':
          description: Total Penjualan updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Total Penjualan updated successfully
        '400':
          description: Invalid input
        '404':
          description: Total Penjualan not found
        '500':
          description: Server error

    delete:
      tags:
        - Total Penjualans
      summary: Delete a total penjualan by ID
      operationId: deleteTotalPenjualanById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: Total Penjualan ID
          schema:
            type: integer
      responses:
        '200':
          description: Total Penjualan deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Total Penjualan deleted successfully
        '404':
          description: Total Penjualan not found
        '500':
          description: Server error